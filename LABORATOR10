#include <iostream>
// for vector
#include <vector> //https://www.geeksforgeeks.org/vector-in-cpp-stl/

// for list
#include <list>     //https://www.geeksforgeeks.org/list-cpp-stl/
#include <iterator>

using namespace std;
// interfata
class Taxe{
public:
    virtual float Impozit()=0;
    virtual int ani()=0;

};
// clasa abstracta
class Produs{
protected:
 string nume;
 float pretBrut;
 public:
     void afisareBrand(){

     cout<<"Acest produs apartine EDI>.RL";

     }
  virtual  float calculeazaPret()=0;

   friend ostream& operator<<(ostream& out,const Produs& p){

    out<<p.nume;
    return out;


   }
    friend istream& operator >>(istream& in, Produs&p){

        cout<<"Numele este: ";
        in>>p.nume;
        cout<<"Pretul brut este: ";
        in>>p.pretBrut;
        return in;

    }


};

class ProdusPersibail:public Produs{
    string dataExpirare;
public:

       float calculeazaPret(){

        return pretBrut+(40*pretBrut)/100;

    }

    friend ostream& operator<<(ostream& out,const ProdusPersibail& p)
    {
        out<<(Produs&)p;
        out<<" "<<p.dataExpirare;
      return out;

    }
    friend istream& operator >>(istream& in, ProdusPersibail&p){

    in>>(Produs&)p;
    cout<<"Dati data: ";
    in>>p.dataExpirare;
    return in;}


};

class ProdusNePerisbalil:public Produs{
    int garantie;
public:
    float calculeazaPret(){

        return pretBrut+(10*pretBrut)/100;

    }


    friend ostream& operator<<(ostream& out,const ProdusNePerisbalil& p)
    {
        out<<(Produs&)p;
        out<<" "<<p.garantie;
      return out;

    }
    friend istream& operator >>(istream& in, ProdusNePerisbalil&p){

    in>>(Produs&)p;
    cout<<"ani garantie: ";
    in>>p.garantie;
    return in;}






};

int main()
{





        //Vector
    vector <Produs*> listaProduse;

    ProdusPersibail pp;
    ProdusNePerisbalil pn;
    cin>>pp>>pn;


    listaProduse.push_back(&pp);
    listaProduse.push_back(&pn);

     for (auto ir = listaProduse.begin(); ir != listaProduse.end(); ++ir)
        cout << (*ir)->calculeazaPret() << " ";

    //
    for (Produs* n : listaProduse) {
        n->calculeazaPret();

    }// c++ 11
    // List
    list <Produs*> listaProduse2;
    listaProduse2.push_back(&pp);
    listaProduse2.push_front(&pn);

    list <Produs*> :: iterator it;
    
    for(it = listaProduse2.begin(); it != listaProduse2.end(); ++it)
        cout << '\t' << (*it)->calculeazaPret();


    return 0;
}
