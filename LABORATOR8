#include <iostream>
#include <string.h>
using namespace std;
class Persoana{
private:
    string nume;
    char* prenume;
    int varsta;
public:
    string getNume(){
        return nume;
    }
    Persoana(){

        this->nume="Anonim";
        this->prenume=new char[strlen("Anonim")+1];
        strcpy(this->prenume,"Anonim");
        this->varsta=0; }

    Persoana(string nume, char* prenume, int varsta){

        this->nume=nume;
        this->prenume=new char[strlen(prenume)+1];
        strcpy(this->prenume, prenume);
        this->varsta=varsta;

    }
    Persoana(const Persoana& p){


    this->nume=p.nume;
    this->varsta=p.varsta;

    this->prenume=new char[strlen(p.prenume)+1];
    strcpy(this->prenume,p.prenume);



    }

    bool operator<(const Persoana& p1){

       if(this->varsta<p1.varsta)
        return true;

       return false;

    }

    Persoana& operator=(const Persoana& p){

            if(this!=&p){

                 this->nume=p.nume;

                 if(this->prenume!=NULL)
                    delete[] this->prenume;

                 this->prenume=new char[strlen(p.prenume)+1];
                 strcpy(this->prenume, p.prenume);
                 this->varsta=p.varsta;
            }
            return *this;
    }

   friend ostream& operator<<(ostream& out, const Persoana& p)
   {
          out<<p.nume<<" "<<p.prenume<<" "<<p.varsta;
          return out;
   }

   friend istream& operator>>(istream& in, Persoana& p)
   {

       cout<<"Numele este: ";
       in>>p.nume;
       cout<<"Prenumele este: ";
       char buffer[100];
       in>>buffer;

       if(p.prenume!=NULL)
        delete[] p.prenume;
       p.prenume=new char[strlen(buffer)+1];
       strcpy(p.prenume, buffer);

       cout<<"Varsta este ";
       in>>p.varsta;

       return in;
   }

    void afisare(){

    cout<<this->nume<<" "<<this->prenume<<" "<<this->varsta;
    }


};
class Student:public Persoana{
private:
    string facultate;
public:
    Student():Persoana(){

        this->facultate="Anonima";

    }
    Student(string nume, char* prenume, int varsta, string facultate):Persoana(nume, prenume,varsta){

        this->facultate=facultate;

    }
    Student(Persoana p1, string facultate):Persoana(p1){

        this->facultate=facultate;

    }

    Student(const Student& s):Persoana(s){

        this->facultate=s.facultate;


    }

    Student& operator=(const Student& s){

        if(this!=&s){
            Persoana::operator=(s);
            this->facultate=s.facultate;
        }
    return *this;

    }

    friend ostream& operator<<(ostream& out, const Student& s)
     {

         out<<(Persoana&)s;
         out<<" "<<s.facultate;
         return out;

     }

    friend istream& operator>>(istream& in, Student& s){

        in>>(Persoana&)s;
        cout<<"Introduceti facultatea: ";
        in>>s.facultate;
        return in;

    }

    void afisare(){

        Persoana::afisare();
        cout<<" "<<this->facultate;




    }
    void afisareFac(){
        cout<<this->facultate;

    }



};

int main()
{
    char prenume[]={"Edi"};

        Persoana p1;
        p1.afisare();
        cout<<endl;
        Student s1;
        s1.afisare();
        cout<<endl;

        Persoana p2("Szmeteanca",prenume,23);
        p2.afisare();
        cout<<endl;
        Student s2("Szmeteanca2",prenume,23,"Matematica");
        s2.afisare();

        cout<<s2.getNume();

        cout<<endl<<"======\n";

        Student s3(s2);
        s3.afisare();
        cout<<endl;
        Student s4(p2,"Mate-Infor");
        s4.afisare();
        cout<<endl;
        Student s5;
        s5=s3;
        s5.afisare();
        cout<<"\n=====\n";
        cout<<s5;
        cout<<endl;
        Student s6;
        cin>>s6;
        cout<<s6;
        if(s5<s6)
            cout<<"da";
        else
            cout<<"nu";

    return 0;
}
